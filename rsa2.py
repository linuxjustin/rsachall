#!/usr/bin/env python
#TokyoWesterns CTF 4th 2018 | Cryptography [Revolutional Secure Angou - 156pts]
#@Abdelkader

import gmpy
from gmpy2 import isqrt
from Crypto.Util.number import *


N = 263267198123727104271550205341958556303174876064032565857792727663848160746900434003334094378461840454433227578735680279553650400052510227283214433685655389241738968354222022240447121539162931116186488081274412377377863765060659624492965287622808692749117314129201849562443565726131685574812838404826685772784018356022327187718875291322282817197153362298286311745185044256353269081114504160345675620425507611498834298188117790948858958927324322729589237022927318641658527526339949064156992164883005731437748282518738478979873117409239854040895815331355928887403604759009882738848259473325879750260720986636810762489517585226347851473734040531823667025962249586099400648241100437388872231055432689235806576775408121773865595903729724074502829922897576209606754695074134609

#N = 16809924442712290290403972268146404729136337398387543585587922385691232205208904952456166894756423463681417301476531768597525526095592145907599331332888256802856883222089636138597763209373618772218321592840374842334044137335907260797472710869521753591357268215122104298868917562185292900513866206744431640042086483729385911318269030906569639399362889194207326479627835332258695805485714124959985930862377523511276514446771151440627624648692470758438999548140726103882523526460632932758848850419784646449190855119546581907152400013892131830430363417922752725911748860326944837167427691071306540321213837143845664837111
e = 65537

c= 63730750663034420186054203696069279764587723426304400672168802689236894414173435574483861036285304923175308990970626739416195244195549995430401827434818046984872271300851807150225874311165602381589988405416304964847452307525883351225541615576599793984531868515708574409281711313769662949003103013799762173274319885217020434609677019589956037159254692138098542595148862209162217974360672409463898048108702225525424962923062427384889851578644031591358064552906800570492514371562100724091169894418230725012261656940082835040737854122792213175137748786146901908965502442703781479786905292956846018910885453170712237452652785768243138215686333746130607279614237568018186440315574405008206846139370637386144872550749882260458201528561992116159466686768832642982965722508678847

#c = open("flag.encrypted", "rb").read()
#c = c.encode("hex")
#c = int(c, 16)

for k in range(1, 100000):
	q = isqrt(k * N / e)         # q = ((k * N) / e) ^ 2
	for q in range(q-100, q+100):
		if N % q == 0:
			print "[+] Found q: ", q
			print "[+] Calculated p: ", N / q
			print "[+] Calculated phi: ", ((N / q) - 1) * (q - 1)
			print "[+] Calculated d: ", gmpy.invert(e, ((N / q) - 1) * (q - 1))
			print "[+] Decrypted flag.encrypted and Found the message m: ", pow(c, gmpy.invert(e, ((N / q) - 1) * (q - 1)), N)
			m = pow(c, gmpy.invert(e, ((N / q) - 1) * (q - 1)), N)
			print "[+] FLAG is: ", long_to_bytes(m)
			break
